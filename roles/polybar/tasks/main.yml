---
- block:
  - name: Install polybar package
    become: true
    ansible.builtin.apt:
      name: polybar
      state: present

  - name: Check if FiraCode are already installed
    shell: "ls {{ lookup('env', 'HOME') }}/.fonts/FiraCode"
    register: firacode_font_exists
    ignore_errors: true

  - block:
    - name: Ensure the .fonts directory exists
      ansible.builtin.file:
        dest: "{{ lookup('env', 'HOME') }}/.fonts"
        state: directory
        recurse: yes
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"

    - name: Create FiraCode directory
      ansible.builtin.file:
        path: "{{ lookup('env', 'HOME') }}/.fonts/FiraCode"
        state: directory
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"

    - name: Download FiraCode Nerd Font
      ansible.builtin.unarchive:
        src: "https://github.com/ryanoasis/nerd-fonts/releases/download/v2.3.0-RC/FiraCode.zip"
        dest: "{{ lookup('env', 'HOME') }}/.fonts/FiraCode"
        remote_src: true

    - name: Reload font cache
      command: fc-cache -fv

    when: firacode_font_exists is failed

  - name: Create polybar directory configuration
    ansible.builtin.file:
      path: "{{ lookup('env', 'HOME') }}/.config/polybar/scripts"
      state: directory
      recurse: true
      owner: "{{ lookup('env', 'USER') }}"
      group: "{{ lookup('env', 'USER') }}"

  - name: Copy default configuration
    ansible.builtin.copy:
      src: "files/{{ item }}"
      dest: "{{ lookup('env', 'HOME') }}/.config/polybar/{{ item }}"
    loop:
      - config.ini
      - colors.ini
      - fonts.ini
      - modules.ini
      - launch.sh
      - scripts/docker.sh
      - scripts/hostname.sh

  - name: Apply correct permissions to bash files
    ansible.builtin.file:
      dest: "{{ lookup('env', 'HOME') }}/.config/polybar/{{ item }}"
      mode: u=rwx,g=r,o=r
    loop:
      - launch.sh
      - scripts/docker.sh
      - scripts/hostname.sh

  - name: Copy startup file
    ansible.builtin.template:
      src: "templates/polybar.desktop.j2"
      dest: "{{ lookup('env', 'HOME') }}/.config/autostart/polybar.desktop"

  - name: Check if polybar is running
    shell: ps aux | grep polybar | grep -v grep
    register: polybar_process

  - name: Kill polybar process
    shell: polybar-msg cmd quit
    when: "'polybar -c' in polybar_process.stdout"

  - name: Start polybar process
    shell: polybar -c $HOME/.config/polybar/config.ini default 2>&1 | tee -a /tmp/polybar.log & disown
    register: polybar_start
    failed_when: "'error' in polybar_start.stdout"

  tags: polybar
